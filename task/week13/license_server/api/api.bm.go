// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/go-kratos/kratos/pkg/net/http/blademaster"
	"github.com/go-kratos/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathLicensePing = "/demo.service.v1.License/Ping"
var PathLicenseSayHello = "/demo.service.v1.License/SayHello"
var PathLicenseSayHelloURL = "/kratos-demo/say_hello"
var PathLicenseGetHardwareCode = "/v3/hardwareCode"
var PathLicenseGetLicenseAll = "/v3/license"
var PathLicenseGetLicenseProject = "/v3/license/project"
var PathLicensePostLicenseFile = "/v3/license/file"
var PathLicensePostLicenseSync = "/v3/license/sync"
var PathLicenseGetPermissionProject = "/v3/permission/project"

// LicenseBMServer is the server API for License service.
type LicenseBMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	SayHello(ctx context.Context, req *HelloReq) (resp *google_protobuf1.Empty, err error)

	SayHelloURL(ctx context.Context, req *HelloReq) (resp *HelloResp, err error)

	GetHardwareCode(ctx context.Context, req *google_protobuf1.Empty) (resp *HardwareCodeResp, err error)

	GetLicenseAll(ctx context.Context, req *google_protobuf1.Empty) (resp *LicenseInfo, err error)

	GetLicenseProject(ctx context.Context, req *ProjectLicenseReq) (resp *ProjectLicense, err error)

	PostLicenseFile(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	PostLicenseSync(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	GetPermissionProject(ctx context.Context, req *ProjectLicenseReq) (resp *PermissionProject, err error)
}

var LicenseSvc LicenseBMServer

func licensePing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := LicenseSvc.Ping(c, p)
	c.JSON(resp, err)
}

func licenseSayHello(c *bm.Context) {
	p := new(HelloReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := LicenseSvc.SayHello(c, p)
	c.JSON(resp, err)
}

func licenseSayHelloURL(c *bm.Context) {
	p := new(HelloReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := LicenseSvc.SayHelloURL(c, p)
	c.JSON(resp, err)
}

func licenseGetHardwareCode(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := LicenseSvc.GetHardwareCode(c, p)
	c.JSON(resp, err)
}

func licenseGetLicenseAll(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := LicenseSvc.GetLicenseAll(c, p)
	c.JSON(resp, err)
}

func licenseGetLicenseProject(c *bm.Context) {
	p := new(ProjectLicenseReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := LicenseSvc.GetLicenseProject(c, p)
	c.JSON(resp, err)
}

func licensePostLicenseFile(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := LicenseSvc.PostLicenseFile(c, p)
	c.JSON(resp, err)
}

func licensePostLicenseSync(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := LicenseSvc.PostLicenseSync(c, p)
	c.JSON(resp, err)
}

func licenseGetPermissionProject(c *bm.Context) {
	p := new(ProjectLicenseReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := LicenseSvc.GetPermissionProject(c, p)
	c.JSON(resp, err)
}

// RegisterLicenseBMServer Register the blademaster route
func RegisterLicenseBMServer(e *bm.Engine, server LicenseBMServer) {
	LicenseSvc = server
	e.GET("/demo.service.v1.License/Ping", licensePing)
	e.GET("/demo.service.v1.License/SayHello", licenseSayHello)
	e.GET("/kratos-demo/say_hello", licenseSayHelloURL)
	e.GET("/v3/hardwareCode", licenseGetHardwareCode)
	e.GET("/v3/license", licenseGetLicenseAll)
	e.GET("/v3/license/project", licenseGetLicenseProject)
	e.POST("/v3/license/file", licensePostLicenseFile)
	e.POST("/v3/license/sync", licensePostLicenseSync)
	e.GET("/v3/permission/project", licenseGetPermissionProject)
}
