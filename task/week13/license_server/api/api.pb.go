// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HelloReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" form:"name" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloReq) Reset()         { *m = HelloReq{} }
func (m *HelloReq) String() string { return proto.CompactTextString(m) }
func (*HelloReq) ProtoMessage()    {}
func (*HelloReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *HelloReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelloReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelloReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelloReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloReq.Merge(m, src)
}
func (m *HelloReq) XXX_Size() int {
	return m.Size()
}
func (m *HelloReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloReq.DiscardUnknown(m)
}

var xxx_messageInfo_HelloReq proto.InternalMessageInfo

type HelloResp struct {
	Content              string   `protobuf:"bytes,1,opt,name=Content,proto3" json:"content"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloResp) Reset()         { *m = HelloResp{} }
func (m *HelloResp) String() string { return proto.CompactTextString(m) }
func (*HelloResp) ProtoMessage()    {}
func (*HelloResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *HelloResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelloResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelloResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelloResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloResp.Merge(m, src)
}
func (m *HelloResp) XXX_Size() int {
	return m.Size()
}
func (m *HelloResp) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloResp.DiscardUnknown(m)
}

var xxx_messageInfo_HelloResp proto.InternalMessageInfo

type HardwareCodeResp struct {
	HardwareCode         string   `protobuf:"bytes,1,opt,name=HardwareCode,proto3" json:"hardwareCode"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HardwareCodeResp) Reset()         { *m = HardwareCodeResp{} }
func (m *HardwareCodeResp) String() string { return proto.CompactTextString(m) }
func (*HardwareCodeResp) ProtoMessage()    {}
func (*HardwareCodeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *HardwareCodeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HardwareCodeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HardwareCodeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HardwareCodeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareCodeResp.Merge(m, src)
}
func (m *HardwareCodeResp) XXX_Size() int {
	return m.Size()
}
func (m *HardwareCodeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareCodeResp.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareCodeResp proto.InternalMessageInfo

type LicenseInfo struct {
	LicenseId            int32             `protobuf:"varint,1,opt,name=LicenseId,proto3" json:"licenseId"`
	HardwareCode         string            `protobuf:"bytes,2,opt,name=HardwareCode,proto3" json:"hardwareCode"`
	ProductId            int32             `protobuf:"varint,3,opt,name=ProductId,proto3" json:"productId"`
	ProductName          string            `protobuf:"bytes,4,opt,name=ProductName,proto3" json:"productName"`
	Authmessage          string            `protobuf:"bytes,5,opt,name=Authmessage,proto3" json:"authmessage"`
	ProjectLicenses      []*ProjectLicense `protobuf:"bytes,6,rep,name=ProjectLicenses,proto3" json:"projectLicenses"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *LicenseInfo) Reset()         { *m = LicenseInfo{} }
func (m *LicenseInfo) String() string { return proto.CompactTextString(m) }
func (*LicenseInfo) ProtoMessage()    {}
func (*LicenseInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *LicenseInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LicenseInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LicenseInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LicenseInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LicenseInfo.Merge(m, src)
}
func (m *LicenseInfo) XXX_Size() int {
	return m.Size()
}
func (m *LicenseInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LicenseInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LicenseInfo proto.InternalMessageInfo

type ProjectLicenseReq struct {
	ProjectLicense       string   `protobuf:"bytes,1,opt,name=ProjectLicense,proto3" json:"ProjectLicense,omitempty" form:"projectLicense" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProjectLicenseReq) Reset()         { *m = ProjectLicenseReq{} }
func (m *ProjectLicenseReq) String() string { return proto.CompactTextString(m) }
func (*ProjectLicenseReq) ProtoMessage()    {}
func (*ProjectLicenseReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *ProjectLicenseReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProjectLicenseReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProjectLicenseReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProjectLicenseReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectLicenseReq.Merge(m, src)
}
func (m *ProjectLicenseReq) XXX_Size() int {
	return m.Size()
}
func (m *ProjectLicenseReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectLicenseReq.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectLicenseReq proto.InternalMessageInfo

// 项目授权信息
type ProjectLicense struct {
	ProjectLicenseId     int32              `protobuf:"varint,1,opt,name=ProjectLicenseId,proto3" json:"projectLicenseId"`
	ProjectLicense       string             `protobuf:"bytes,2,opt,name=ProjectLicense,proto3" json:"projectLicense"`
	ProjectName          string             `protobuf:"bytes,3,opt,name=ProjectName,proto3" json:"projectName"`
	Status               int32              `protobuf:"varint,4,opt,name=Status,proto3" json:"status"`
	Permanent            int32              `protobuf:"varint,5,opt,name=Permanent,proto3" json:"permanent"`
	AuthBeginTime        string             `protobuf:"bytes,6,opt,name=AuthBeginTime,proto3" json:"authBeginTime"`
	AuthExpireTime       string             `protobuf:"bytes,7,opt,name=AuthExpireTime,proto3" json:"authExpireTime"`
	Modules              []*LicenseModule   `protobuf:"bytes,8,rep,name=Modules,proto3" json:"modules"`
	Resources            []*LicesneResource `protobuf:"bytes,9,rep,name=Resources,proto3" json:"resources"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ProjectLicense) Reset()         { *m = ProjectLicense{} }
func (m *ProjectLicense) String() string { return proto.CompactTextString(m) }
func (*ProjectLicense) ProtoMessage()    {}
func (*ProjectLicense) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *ProjectLicense) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProjectLicense) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProjectLicense.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProjectLicense) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectLicense.Merge(m, src)
}
func (m *ProjectLicense) XXX_Size() int {
	return m.Size()
}
func (m *ProjectLicense) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectLicense.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectLicense proto.InternalMessageInfo

// 授权内容
type LicenseModule struct {
	ModuleId             int32    `protobuf:"varint,1,opt,name=ModuleId,proto3" json:"moduleId"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"name"`
	IsAuth               int32    `protobuf:"varint,3,opt,name=IsAuth,proto3" json:"isAuth"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LicenseModule) Reset()         { *m = LicenseModule{} }
func (m *LicenseModule) String() string { return proto.CompactTextString(m) }
func (*LicenseModule) ProtoMessage()    {}
func (*LicenseModule) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *LicenseModule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LicenseModule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LicenseModule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LicenseModule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LicenseModule.Merge(m, src)
}
func (m *LicenseModule) XXX_Size() int {
	return m.Size()
}
func (m *LicenseModule) XXX_DiscardUnknown() {
	xxx_messageInfo_LicenseModule.DiscardUnknown(m)
}

var xxx_messageInfo_LicenseModule proto.InternalMessageInfo

type LicesneResource struct {
	ModuleId             int32    `protobuf:"varint,1,opt,name=ModuleId,proto3" json:"moduleId"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"name"`
	Quota                int32    `protobuf:"varint,3,opt,name=Quota,proto3" json:"quota"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LicesneResource) Reset()         { *m = LicesneResource{} }
func (m *LicesneResource) String() string { return proto.CompactTextString(m) }
func (*LicesneResource) ProtoMessage()    {}
func (*LicesneResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *LicesneResource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LicesneResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LicesneResource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LicesneResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LicesneResource.Merge(m, src)
}
func (m *LicesneResource) XXX_Size() int {
	return m.Size()
}
func (m *LicesneResource) XXX_DiscardUnknown() {
	xxx_messageInfo_LicesneResource.DiscardUnknown(m)
}

var xxx_messageInfo_LicesneResource proto.InternalMessageInfo

type PostLicenseFileReq struct {
	File                 string   `protobuf:"bytes,1,opt,name=File,proto3" json:"File,omitempty" form:"file" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PostLicenseFileReq) Reset()         { *m = PostLicenseFileReq{} }
func (m *PostLicenseFileReq) String() string { return proto.CompactTextString(m) }
func (*PostLicenseFileReq) ProtoMessage()    {}
func (*PostLicenseFileReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *PostLicenseFileReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostLicenseFileReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PostLicenseFileReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PostLicenseFileReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostLicenseFileReq.Merge(m, src)
}
func (m *PostLicenseFileReq) XXX_Size() int {
	return m.Size()
}
func (m *PostLicenseFileReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PostLicenseFileReq.DiscardUnknown(m)
}

var xxx_messageInfo_PostLicenseFileReq proto.InternalMessageInfo

type PermissionProject struct {
	Content              string   `protobuf:"bytes,1,opt,name=Content,proto3" json:"content"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PermissionProject) Reset()         { *m = PermissionProject{} }
func (m *PermissionProject) String() string { return proto.CompactTextString(m) }
func (*PermissionProject) ProtoMessage()    {}
func (*PermissionProject) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *PermissionProject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PermissionProject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PermissionProject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PermissionProject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PermissionProject.Merge(m, src)
}
func (m *PermissionProject) XXX_Size() int {
	return m.Size()
}
func (m *PermissionProject) XXX_DiscardUnknown() {
	xxx_messageInfo_PermissionProject.DiscardUnknown(m)
}

var xxx_messageInfo_PermissionProject proto.InternalMessageInfo

func init() {
	proto.RegisterType((*HelloReq)(nil), "demo.service.v1.HelloReq")
	proto.RegisterType((*HelloResp)(nil), "demo.service.v1.HelloResp")
	proto.RegisterType((*HardwareCodeResp)(nil), "demo.service.v1.HardwareCodeResp")
	proto.RegisterType((*LicenseInfo)(nil), "demo.service.v1.LicenseInfo")
	proto.RegisterType((*ProjectLicenseReq)(nil), "demo.service.v1.ProjectLicenseReq")
	proto.RegisterType((*ProjectLicense)(nil), "demo.service.v1.ProjectLicense")
	proto.RegisterType((*LicenseModule)(nil), "demo.service.v1.LicenseModule")
	proto.RegisterType((*LicesneResource)(nil), "demo.service.v1.LicesneResource")
	proto.RegisterType((*PostLicenseFileReq)(nil), "demo.service.v1.PostLicenseFileReq")
	proto.RegisterType((*PermissionProject)(nil), "demo.service.v1.PermissionProject")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 984 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0x6e, 0x92, 0xfd, 0x39, 0x9b, 0xed, 0x6e, 0x26, 0xa5, 0xda, 0xa6, 0xd1, 0x3a, 0x0c, 0x42,
	0x0a, 0x42, 0x59, 0xab, 0x09, 0xa2, 0x52, 0x24, 0x24, 0xba, 0x51, 0x48, 0x22, 0x35, 0x28, 0x4c,
	0xe8, 0xa5, 0x48, 0xa0, 0xc9, 0x7a, 0x76, 0xe3, 0x62, 0x7b, 0x1c, 0x8f, 0xbd, 0x10, 0x90, 0x38,
	0xf0, 0x2f, 0x70, 0xe1, 0xc2, 0xff, 0xd3, 0x23, 0x12, 0x47, 0x24, 0x0b, 0x52, 0x4e, 0x3e, 0xf6,
	0x2f, 0x40, 0x33, 0x9e, 0x89, 0x7f, 0x6c, 0x96, 0x06, 0xa9, 0x37, 0xfb, 0x7b, 0xef, 0x7d, 0xdf,
	0xcc, 0xbc, 0x6f, 0xe6, 0x81, 0x26, 0xf1, 0xed, 0x81, 0x1f, 0xb0, 0x90, 0xc1, 0x8e, 0x45, 0x5d,
	0x36, 0xe0, 0x34, 0x98, 0xda, 0x23, 0x3a, 0x98, 0x3e, 0x5a, 0xdb, 0x9a, 0xd8, 0xe1, 0x79, 0x74,
	0x36, 0x18, 0x31, 0xd7, 0x9c, 0xb0, 0x09, 0x33, 0x65, 0xde, 0x59, 0x34, 0x96, 0x7f, 0xf2, 0x47,
	0x7e, 0xa5, 0xf5, 0x6b, 0x0f, 0x27, 0x8c, 0x4d, 0x1c, 0x9a, 0x65, 0x51, 0xd7, 0x0f, 0x2f, 0x55,
	0x70, 0x5d, 0x05, 0x89, 0x6f, 0x9b, 0xc4, 0xf3, 0x58, 0x48, 0x42, 0x9b, 0x79, 0x3c, 0x8d, 0xa2,
	0x3d, 0xd0, 0x38, 0xa4, 0x8e, 0xc3, 0x30, 0xbd, 0x80, 0x8f, 0x41, 0xc5, 0x23, 0x2e, 0xed, 0x2d,
	0x6c, 0x2c, 0x6c, 0x36, 0x87, 0xef, 0xbd, 0x8e, 0x0d, 0x63, 0xcc, 0x02, 0x77, 0x17, 0x09, 0x14,
	0x6d, 0x4c, 0x89, 0x63, 0x5b, 0x24, 0xa4, 0xbb, 0x28, 0xa0, 0x17, 0x91, 0x1d, 0x50, 0x0b, 0x61,
	0x59, 0x80, 0xb6, 0x41, 0x53, 0x91, 0x70, 0x1f, 0xbe, 0x0f, 0xea, 0x7b, 0xcc, 0x0b, 0xa9, 0x17,
	0x2a, 0xa2, 0x56, 0x12, 0x1b, 0xf5, 0x51, 0x0a, 0x61, 0x1d, 0x43, 0x87, 0xa0, 0x7b, 0x48, 0x02,
	0xeb, 0x3b, 0x12, 0xd0, 0x3d, 0x66, 0x51, 0x59, 0xfa, 0x11, 0x58, 0xce, 0x63, 0xaa, 0xbe, 0x9b,
	0xc4, 0xc6, 0xf2, 0x79, 0x3e, 0xb7, 0x90, 0x85, 0x5e, 0x2d, 0x82, 0xd6, 0x53, 0x7b, 0x44, 0x3d,
	0x4e, 0x8f, 0xbc, 0x31, 0x83, 0x1f, 0x82, 0xa6, 0xfe, 0xb5, 0x24, 0x45, 0x75, 0xd8, 0x4e, 0x62,
	0xa3, 0xe9, 0x68, 0x10, 0x67, 0xf1, 0x19, 0xc9, 0xc5, 0xdb, 0x48, 0x0a, 0x89, 0x93, 0x80, 0x59,
	0xd1, 0x28, 0x3c, 0xb2, 0x7a, 0x4b, 0x99, 0x84, 0xaf, 0x41, 0x9c, 0xc5, 0xe1, 0x23, 0xd0, 0x52,
	0x3f, 0x9f, 0x8b, 0xd3, 0xad, 0x48, 0x85, 0x4e, 0x12, 0x1b, 0x2d, 0x3f, 0x83, 0x71, 0x3e, 0x47,
	0x94, 0x3c, 0x89, 0xc2, 0x73, 0x97, 0x72, 0x4e, 0x26, 0xb4, 0x57, 0xcd, 0x4a, 0x48, 0x06, 0xe3,
	0x7c, 0x0e, 0xfc, 0x1a, 0x74, 0x4e, 0x02, 0xf6, 0x82, 0x8e, 0x42, 0xb5, 0x39, 0xde, 0xab, 0x6d,
	0x2c, 0x6d, 0xb6, 0xb6, 0x8d, 0x41, 0xc9, 0x5d, 0x83, 0x62, 0xde, 0x70, 0x35, 0x89, 0x8d, 0x8e,
	0x5f, 0xac, 0xc5, 0x65, 0x32, 0xf4, 0x02, 0xac, 0x14, 0x21, 0xe1, 0x98, 0x67, 0xe0, 0x6e, 0x11,
	0x54, 0x2d, 0xdb, 0x7a, 0x1d, 0x1b, 0x1f, 0xa4, 0xde, 0x29, 0x12, 0xdf, 0xec, 0xa2, 0x12, 0x09,
	0xfa, 0xad, 0x52, 0xe6, 0x85, 0x9f, 0x82, 0x6e, 0x11, 0xb9, 0xee, 0xed, 0xbd, 0x24, 0x36, 0xba,
	0x7e, 0x29, 0x86, 0x67, 0xb2, 0xe1, 0xee, 0xcc, 0x5a, 0xd3, 0x5e, 0xc3, 0x24, 0x36, 0xee, 0x16,
	0xeb, 0xcb, 0x0b, 0x52, 0x2d, 0x14, 0x88, 0x6c, 0xe1, 0x52, 0xa1, 0x85, 0x1a, 0xc6, 0xf9, 0x1c,
	0x88, 0x40, 0xed, 0x34, 0x24, 0x61, 0xc4, 0x65, 0xc3, 0xab, 0x43, 0x90, 0xc4, 0x46, 0x8d, 0x4b,
	0x04, 0xab, 0x88, 0xb4, 0x11, 0x0d, 0x5c, 0xe2, 0x89, 0xcb, 0x52, 0xcd, 0xd9, 0x48, 0x83, 0x38,
	0x8b, 0xc3, 0xc7, 0xa0, 0x2d, 0xfa, 0x3d, 0xa4, 0x13, 0xdb, 0xfb, 0xd2, 0x76, 0x69, 0xaf, 0x26,
	0x57, 0xb1, 0x92, 0xc4, 0x46, 0x9b, 0xe4, 0x03, 0xb8, 0x98, 0x27, 0x36, 0x2e, 0x80, 0xfd, 0xef,
	0x7d, 0x3b, 0xa0, 0xb2, 0xb2, 0x9e, 0x6d, 0x9c, 0x14, 0x22, 0xb8, 0x94, 0x09, 0xf7, 0x41, 0xfd,
	0x98, 0x59, 0x91, 0x43, 0x79, 0xaf, 0x21, 0xdd, 0xd4, 0x9f, 0x71, 0x93, 0x3a, 0xa3, 0x34, 0x2d,
	0xbd, 0xec, 0x6e, 0x5a, 0x82, 0x75, 0x2d, 0x3c, 0x06, 0x4d, 0x4c, 0x39, 0x8b, 0x82, 0x11, 0xe5,
	0xbd, 0xa6, 0x24, 0xda, 0xb8, 0x91, 0x88, 0x7b, 0x54, 0x27, 0xa6, 0x47, 0x11, 0xe8, 0x32, 0x9c,
	0x31, 0xa0, 0x1f, 0x41, 0xbb, 0xa0, 0x0a, 0x37, 0x41, 0x23, 0xfd, 0xba, 0x76, 0xc5, 0x72, 0x12,
	0x1b, 0x0d, 0x57, 0x61, 0xf8, 0x3a, 0x0a, 0xd7, 0x41, 0x45, 0xb6, 0x30, 0xed, 0x7d, 0x23, 0x89,
	0x0d, 0xf9, 0x84, 0xe1, 0x8a, 0x6e, 0xda, 0x11, 0x17, 0x47, 0xa0, 0x2e, 0xb5, 0x6c, 0x9a, 0x2d,
	0x11, 0xac, 0x22, 0xe8, 0x07, 0xd0, 0x29, 0xad, 0xf4, 0xad, 0xc9, 0x1b, 0xa0, 0xfa, 0x45, 0xc4,
	0x42, 0xa2, 0xd4, 0x9b, 0x49, 0x6c, 0x54, 0x2f, 0x04, 0x80, 0x53, 0x1c, 0x1d, 0x03, 0x78, 0xc2,
	0xb8, 0xb6, 0xe5, 0x67, 0xb6, 0x43, 0xd5, 0xbb, 0x2d, 0x3e, 0x67, 0xdf, 0xed, 0xb1, 0xed, 0xcc,
	0x7b, 0xb7, 0x45, 0x01, 0xda, 0x05, 0x2b, 0xc2, 0x5f, 0x36, 0xe7, 0x36, 0xf3, 0x94, 0x79, 0x6f,
	0xf9, 0x7e, 0x6f, 0xff, 0x59, 0x03, 0x75, 0x7d, 0x3d, 0x3e, 0x06, 0x95, 0x13, 0xdb, 0x9b, 0xc0,
	0xfb, 0x83, 0x74, 0xd6, 0x0c, 0xf4, 0x20, 0x1a, 0xec, 0x8b, 0x41, 0xb4, 0x36, 0x07, 0x87, 0x9f,
	0x80, 0xc6, 0x29, 0xb9, 0x94, 0xa3, 0x03, 0x3e, 0x98, 0xf1, 0x83, 0x9e, 0x4b, 0x73, 0xcb, 0x2d,
	0xd0, 0xd2, 0xe5, 0xcf, 0xf0, 0xd3, 0xff, 0x62, 0x58, 0x9b, 0x17, 0xe2, 0x3e, 0xea, 0xff, 0xfc,
	0xc7, 0x3f, 0xbf, 0x2c, 0xf6, 0xe0, 0x7d, 0xf3, 0xdb, 0x80, 0x84, 0x8c, 0x6f, 0x89, 0x54, 0x93,
	0x93, 0xcb, 0x6f, 0xce, 0xe5, 0xc2, 0xc6, 0xa0, 0x73, 0x40, 0xc3, 0xc2, 0xf3, 0x3f, 0x6f, 0x9f,
	0xef, 0xce, 0xca, 0x94, 0x46, 0x1c, 0xea, 0x49, 0x35, 0x08, 0xbb, 0xe6, 0x74, 0xc7, 0xcc, 0x4f,
	0x18, 0xf8, 0x1c, 0xb4, 0x0f, 0xa8, 0x6e, 0xed, 0x13, 0xc7, 0x99, 0xab, 0xb2, 0x3e, 0xef, 0x0a,
	0x8a, 0xe9, 0x87, 0x56, 0xa5, 0x40, 0x1b, 0xb6, 0x84, 0x80, 0x1a, 0x79, 0x30, 0x02, 0x2b, 0x19,
	0xb7, 0x6e, 0x34, 0x7a, 0xc3, 0x60, 0x10, 0x07, 0xf7, 0xa6, 0xe1, 0x81, 0x1e, 0x4a, 0xb9, 0x77,
	0xe0, 0x6a, 0x4e, 0xce, 0x54, 0x8f, 0x22, 0xfc, 0x0a, 0x74, 0x4a, 0x76, 0xfd, 0xbf, 0x16, 0xd1,
	0xe7, 0x85, 0xba, 0x79, 0x7e, 0xe1, 0xeb, 0x12, 0xf9, 0xe9, 0xa5, 0x37, 0x7a, 0x3b, 0xe4, 0x5c,
	0x30, 0xfd, 0x04, 0xee, 0x1d, 0xd0, 0x70, 0xf6, 0x72, 0xdc, 0xe6, 0xcc, 0x6e, 0xc8, 0x29, 0xf3,
	0xe4, 0x4c, 0x37, 0xdd, 0x31, 0xfd, 0xeb, 0xb0, 0x3e, 0xb9, 0xe1, 0x83, 0x97, 0x7f, 0xf7, 0xef,
	0xbc, 0xbc, 0xea, 0x2f, 0xfc, 0x7e, 0xd5, 0x5f, 0xf8, 0xeb, 0xaa, 0xbf, 0xf0, 0xeb, 0xab, 0xfe,
	0x9d, 0xe7, 0x4b, 0xc4, 0xb7, 0xcf, 0x6a, 0x72, 0x13, 0x3b, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff,
	0xe9, 0xc6, 0xd0, 0x86, 0x40, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LicenseClient is the client API for License service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LicenseClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	SayHello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*empty.Empty, error)
	SayHelloURL(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error)
	GetHardwareCode(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*HardwareCodeResp, error)
	GetLicenseAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LicenseInfo, error)
	GetLicenseProject(ctx context.Context, in *ProjectLicenseReq, opts ...grpc.CallOption) (*ProjectLicense, error)
	PostLicenseFile(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	PostLicenseSync(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	GetPermissionProject(ctx context.Context, in *ProjectLicenseReq, opts ...grpc.CallOption) (*PermissionProject, error)
}

type licenseClient struct {
	cc *grpc.ClientConn
}

func NewLicenseClient(cc *grpc.ClientConn) LicenseClient {
	return &licenseClient{cc}
}

func (c *licenseClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/demo.service.v1.License/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseClient) SayHello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/demo.service.v1.License/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseClient) SayHelloURL(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error) {
	out := new(HelloResp)
	err := c.cc.Invoke(ctx, "/demo.service.v1.License/SayHelloURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseClient) GetHardwareCode(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*HardwareCodeResp, error) {
	out := new(HardwareCodeResp)
	err := c.cc.Invoke(ctx, "/demo.service.v1.License/GetHardwareCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseClient) GetLicenseAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LicenseInfo, error) {
	out := new(LicenseInfo)
	err := c.cc.Invoke(ctx, "/demo.service.v1.License/GetLicenseAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseClient) GetLicenseProject(ctx context.Context, in *ProjectLicenseReq, opts ...grpc.CallOption) (*ProjectLicense, error) {
	out := new(ProjectLicense)
	err := c.cc.Invoke(ctx, "/demo.service.v1.License/GetLicenseProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseClient) PostLicenseFile(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/demo.service.v1.License/PostLicenseFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseClient) PostLicenseSync(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/demo.service.v1.License/PostLicenseSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseClient) GetPermissionProject(ctx context.Context, in *ProjectLicenseReq, opts ...grpc.CallOption) (*PermissionProject, error) {
	out := new(PermissionProject)
	err := c.cc.Invoke(ctx, "/demo.service.v1.License/GetPermissionProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LicenseServer is the server API for License service.
type LicenseServer interface {
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	SayHello(context.Context, *HelloReq) (*empty.Empty, error)
	SayHelloURL(context.Context, *HelloReq) (*HelloResp, error)
	GetHardwareCode(context.Context, *empty.Empty) (*HardwareCodeResp, error)
	GetLicenseAll(context.Context, *empty.Empty) (*LicenseInfo, error)
	GetLicenseProject(context.Context, *ProjectLicenseReq) (*ProjectLicense, error)
	PostLicenseFile(context.Context, *empty.Empty) (*empty.Empty, error)
	PostLicenseSync(context.Context, *empty.Empty) (*empty.Empty, error)
	GetPermissionProject(context.Context, *ProjectLicenseReq) (*PermissionProject, error)
}

// UnimplementedLicenseServer can be embedded to have forward compatible implementations.
type UnimplementedLicenseServer struct {
}

func (*UnimplementedLicenseServer) Ping(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedLicenseServer) SayHello(ctx context.Context, req *HelloReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (*UnimplementedLicenseServer) SayHelloURL(ctx context.Context, req *HelloReq) (*HelloResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHelloURL not implemented")
}
func (*UnimplementedLicenseServer) GetHardwareCode(ctx context.Context, req *empty.Empty) (*HardwareCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHardwareCode not implemented")
}
func (*UnimplementedLicenseServer) GetLicenseAll(ctx context.Context, req *empty.Empty) (*LicenseInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLicenseAll not implemented")
}
func (*UnimplementedLicenseServer) GetLicenseProject(ctx context.Context, req *ProjectLicenseReq) (*ProjectLicense, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLicenseProject not implemented")
}
func (*UnimplementedLicenseServer) PostLicenseFile(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostLicenseFile not implemented")
}
func (*UnimplementedLicenseServer) PostLicenseSync(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostLicenseSync not implemented")
}
func (*UnimplementedLicenseServer) GetPermissionProject(ctx context.Context, req *ProjectLicenseReq) (*PermissionProject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionProject not implemented")
}

func RegisterLicenseServer(s *grpc.Server, srv LicenseServer) {
	s.RegisterService(&_License_serviceDesc, srv)
}

func _License_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.License/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _License_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.License/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseServer).SayHello(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _License_SayHelloURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseServer).SayHelloURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.License/SayHelloURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseServer).SayHelloURL(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _License_GetHardwareCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseServer).GetHardwareCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.License/GetHardwareCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseServer).GetHardwareCode(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _License_GetLicenseAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseServer).GetLicenseAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.License/GetLicenseAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseServer).GetLicenseAll(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _License_GetLicenseProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectLicenseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseServer).GetLicenseProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.License/GetLicenseProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseServer).GetLicenseProject(ctx, req.(*ProjectLicenseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _License_PostLicenseFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseServer).PostLicenseFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.License/PostLicenseFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseServer).PostLicenseFile(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _License_PostLicenseSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseServer).PostLicenseSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.License/PostLicenseSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseServer).PostLicenseSync(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _License_GetPermissionProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectLicenseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseServer).GetPermissionProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.License/GetPermissionProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseServer).GetPermissionProject(ctx, req.(*ProjectLicenseReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _License_serviceDesc = grpc.ServiceDesc{
	ServiceName: "demo.service.v1.License",
	HandlerType: (*LicenseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _License_Ping_Handler,
		},
		{
			MethodName: "SayHello",
			Handler:    _License_SayHello_Handler,
		},
		{
			MethodName: "SayHelloURL",
			Handler:    _License_SayHelloURL_Handler,
		},
		{
			MethodName: "GetHardwareCode",
			Handler:    _License_GetHardwareCode_Handler,
		},
		{
			MethodName: "GetLicenseAll",
			Handler:    _License_GetLicenseAll_Handler,
		},
		{
			MethodName: "GetLicenseProject",
			Handler:    _License_GetLicenseProject_Handler,
		},
		{
			MethodName: "PostLicenseFile",
			Handler:    _License_PostLicenseFile_Handler,
		},
		{
			MethodName: "PostLicenseSync",
			Handler:    _License_PostLicenseSync_Handler,
		},
		{
			MethodName: "GetPermissionProject",
			Handler:    _License_GetPermissionProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *HelloReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelloReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelloReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HelloResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelloResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelloResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HardwareCodeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HardwareCodeResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HardwareCodeResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.HardwareCode) > 0 {
		i -= len(m.HardwareCode)
		copy(dAtA[i:], m.HardwareCode)
		i = encodeVarintApi(dAtA, i, uint64(len(m.HardwareCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LicenseInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LicenseInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LicenseInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ProjectLicenses) > 0 {
		for iNdEx := len(m.ProjectLicenses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProjectLicenses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Authmessage) > 0 {
		i -= len(m.Authmessage)
		copy(dAtA[i:], m.Authmessage)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Authmessage)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ProductName) > 0 {
		i -= len(m.ProductName)
		copy(dAtA[i:], m.ProductName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ProductName)))
		i--
		dAtA[i] = 0x22
	}
	if m.ProductId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ProductId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.HardwareCode) > 0 {
		i -= len(m.HardwareCode)
		copy(dAtA[i:], m.HardwareCode)
		i = encodeVarintApi(dAtA, i, uint64(len(m.HardwareCode)))
		i--
		dAtA[i] = 0x12
	}
	if m.LicenseId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LicenseId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProjectLicenseReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProjectLicenseReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProjectLicenseReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ProjectLicense) > 0 {
		i -= len(m.ProjectLicense)
		copy(dAtA[i:], m.ProjectLicense)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ProjectLicense)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProjectLicense) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProjectLicense) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProjectLicense) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Resources) > 0 {
		for iNdEx := len(m.Resources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Resources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Modules) > 0 {
		for iNdEx := len(m.Modules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Modules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.AuthExpireTime) > 0 {
		i -= len(m.AuthExpireTime)
		copy(dAtA[i:], m.AuthExpireTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AuthExpireTime)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AuthBeginTime) > 0 {
		i -= len(m.AuthBeginTime)
		copy(dAtA[i:], m.AuthBeginTime)
		i = encodeVarintApi(dAtA, i, uint64(len(m.AuthBeginTime)))
		i--
		dAtA[i] = 0x32
	}
	if m.Permanent != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Permanent))
		i--
		dAtA[i] = 0x28
	}
	if m.Status != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ProjectName) > 0 {
		i -= len(m.ProjectName)
		copy(dAtA[i:], m.ProjectName)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ProjectName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProjectLicense) > 0 {
		i -= len(m.ProjectLicense)
		copy(dAtA[i:], m.ProjectLicense)
		i = encodeVarintApi(dAtA, i, uint64(len(m.ProjectLicense)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProjectLicenseId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ProjectLicenseId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LicenseModule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LicenseModule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LicenseModule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsAuth != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.IsAuth))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ModuleId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ModuleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LicesneResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LicesneResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LicesneResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Quota != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Quota))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ModuleId != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.ModuleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PostLicenseFileReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostLicenseFileReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostLicenseFileReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.File) > 0 {
		i -= len(m.File)
		copy(dAtA[i:], m.File)
		i = encodeVarintApi(dAtA, i, uint64(len(m.File)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PermissionProject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PermissionProject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PermissionProject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HelloReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HelloResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HardwareCodeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HardwareCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LicenseInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LicenseId != 0 {
		n += 1 + sovApi(uint64(m.LicenseId))
	}
	l = len(m.HardwareCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ProductId != 0 {
		n += 1 + sovApi(uint64(m.ProductId))
	}
	l = len(m.ProductName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Authmessage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.ProjectLicenses) > 0 {
		for _, e := range m.ProjectLicenses {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProjectLicenseReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectLicense)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProjectLicense) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProjectLicenseId != 0 {
		n += 1 + sovApi(uint64(m.ProjectLicenseId))
	}
	l = len(m.ProjectLicense)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ProjectName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.Permanent != 0 {
		n += 1 + sovApi(uint64(m.Permanent))
	}
	l = len(m.AuthBeginTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AuthExpireTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Modules) > 0 {
		for _, e := range m.Modules {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Resources) > 0 {
		for _, e := range m.Resources {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LicenseModule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleId != 0 {
		n += 1 + sovApi(uint64(m.ModuleId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.IsAuth != 0 {
		n += 1 + sovApi(uint64(m.IsAuth))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LicesneResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleId != 0 {
		n += 1 + sovApi(uint64(m.ModuleId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Quota != 0 {
		n += 1 + sovApi(uint64(m.Quota))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PostLicenseFileReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.File)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PermissionProject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HelloReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelloReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelloReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HelloResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelloResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelloResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HardwareCodeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HardwareCodeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HardwareCodeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HardwareCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LicenseInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LicenseInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LicenseInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LicenseId", wireType)
			}
			m.LicenseId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LicenseId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardwareCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HardwareCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			m.ProductId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authmessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authmessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectLicenses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectLicenses = append(m.ProjectLicenses, &ProjectLicense{})
			if err := m.ProjectLicenses[len(m.ProjectLicenses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProjectLicenseReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProjectLicenseReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProjectLicenseReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectLicense", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectLicense = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProjectLicense) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProjectLicense: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProjectLicense: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectLicenseId", wireType)
			}
			m.ProjectLicenseId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectLicenseId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectLicense", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectLicense = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permanent", wireType)
			}
			m.Permanent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permanent |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthBeginTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthBeginTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthExpireTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthExpireTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modules = append(m.Modules, &LicenseModule{})
			if err := m.Modules[len(m.Modules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resources = append(m.Resources, &LicesneResource{})
			if err := m.Resources[len(m.Resources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LicenseModule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LicenseModule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LicenseModule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleId", wireType)
			}
			m.ModuleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAuth", wireType)
			}
			m.IsAuth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsAuth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LicesneResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LicesneResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LicesneResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleId", wireType)
			}
			m.ModuleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quota", wireType)
			}
			m.Quota = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quota |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostLicenseFileReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostLicenseFileReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostLicenseFileReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PermissionProject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PermissionProject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PermissionProject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
